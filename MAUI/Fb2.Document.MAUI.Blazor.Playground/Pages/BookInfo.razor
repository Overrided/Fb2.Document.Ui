@using CommunityToolkit.Maui.Alerts;
@using CommunityToolkit.Maui.Storage;
@using Fb2.Document.Constants;
@using Fb2.Document.Html;
@using Fb2.Document.MAUI.Blazor.Playground.Data;
@using Fb2.Document.MAUI.Blazor.Playground.Services;
@using Fb2.Document.Models;
@using Fb2.Document.Models.Base;
@using System.Text;
@using Fb2.Document.MAUI.Blazor.Playground.Components;

@inject NavigationManager NavManager
@inject AppStateService AppStateService

@page "/bookInfo"

<style>
    .infoCol {
        overflow-y: auto;
    }

    .btn[aria-expanded=false] .infoExpanded {
        display: none;
    }

    .btn[aria-expanded=true] .infoCollapsed {
        display: none;
    }

    .btn:focus {
        outline: none !important;
    }

        .btn:focus:not(:focus-visible) {
            outline: 0;
            box-shadow: none;
        }

    .readBookBtn {
        border-radius: 90px;
        height: 60px;
        width: 60px;
        position: fixed;
        bottom: 20px;
        right: 20px;
    }

    .bookImagePreviewContainer {
        position: relative;
    }

    .bookImagePreview {
        object-fit: contain;
        height: 190px;
        width: 190px;
    }

    .bookImagePreviewContainer:hover .hoverOverlay {
        display: inline-block;
    }

    .hoverOverlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        text-align: center;
        transition: .75s ease;
        background-image: radial-gradient(white 15%, black 15%, black 18%, #ffffff44 100%);
    }

    .bookModalImagePreview {
        object-fit: contain;
        max-width: 190px;
        width: auto;
    }

    .modalContentWidth {
        width: 50vw;
    }

    .enlargeImageBtn {
        border-radius: 90px;
        height: 70px;
        width: 70px;
        margin-top: 70px;
    }
</style>

@if (SelectedBook != null)
{
    <div class="row h-100 m-0 g-0">

        <!--coverpage-->
        <div class="col-md-6 d-flex h-100 flex-nowrap p-2">
            <img class="align-self-center mx-auto my-auto d-block mh-100 mw-100" src="@SelectedBook.CoverpageBase64Image" />
        </div>

        <div class="infoCol col-md-6 px-2 pb-5 h-100">
            @if (TitleInfo != null)
            {
                <div class="card-body">
                    <TitleInfoBaseRenderer TitleInfo="TitleInfo" />
                </div>
            }

            @if (SrcTitleInfo != null)
            {
                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#srcTitleInfoCollapse"
                                aria-expanded="false"
                                aria-controls="srcTitleInfoCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>Source Title Info</span>
                        </button>
                    </div>

                    <div class="card-body collapse" id="srcTitleInfoCollapse">
                        <TitleInfoBaseRenderer TitleInfo="SrcTitleInfo" />
                    </div>
                </div>
            }

            @if (BookImages != null && BookImages.Count > 0)
            {
                <ModalWindow @ref="modalRef" ContentClass="modalContentWidth">
                    <Content>
                        @if (SelectedBookImage != null)
                        {
                            <div style="height: 91.5vh" class="row">
                                <div class="row flex-row flex-nowrap px-3 py-2 m-0 @(BookImages.Count > 1 ? "h-75" : "h-100")">
                                    <img class="align-self-center mx-auto my-auto d-block mh-100 mw-100 w-auto"
                                         src="@SelectedBookImage.ImageSource"
                                         title="@SelectedBookImage.ImageId" />

                                    <button @onclick="() => CloseImageModal()"
                                            type="button"
                                            class="btn btn-close position-absolute m-2"
                                            style="right:0;top:0">
                                    </button>
                                    <button @onclick="() => DownloadImage()"
                                            type="button"
                                            class="btn position-absolute w-auto"
                                            style="right:0;bottom:25.5%">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                                            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z" />
                                            <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                                        </svg>
                                    </button>
                                </div>
                                @if (BookImages.Count > 1)
                                {
                                    <div class="row flex-row flex-nowrap m-0 h-25 bg-opacity-10 bg-secondary py-1"
                                         style="overflow-x:auto">
                                        @foreach (var image in BookImages)
                                        {
                                            <img src="@image.ImageSource"
                                                 id="@image.ImageId"
                                                 class="@(image == SelectedBookImage ? "bg-info" : "bg-transparent") bookModalImagePreview mx-1"
                                                 title="@image.ImageId" @onclick="() => OnModalPreviewImageClick(image)" />
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </Content>
                </ModalWindow>

                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#bookImagesCollapse"
                                aria-expanded="false"
                                aria-controls="bookImagesCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>Images (@(BookImages.Count))</span>
                        </button>
                    </div>

                    <div class="card-body collapse p-0" id="bookImagesCollapse">
                        <div class="row m-0 p-0 flex-row flex-nowrap" style="overflow-x:auto">
                            @foreach (var image in BookImages)
                            {
                                <div class="w-auto bookImagePreviewContainer p-2"
                                     id="@image.ImageId">
                                    <img src="@image.ImageSource"
                                         class="bookImagePreview" />

                                    <div class="hoverOverlay">
                                        <button class="enlargeImageBtn p-3"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => OnImageClick(image)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-arrows-angle-expand" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            @if (PublishInfo != null)
            {
                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#publishInfoCollapse"
                                aria-expanded="false"
                                aria-controls="publishInfoCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>Publish Info</span>
                        </button>

                    </div>

                    <div class="card-body collapse" id="publishInfoCollapse">
                        <PublishInfoRenderer PublishInfo="PublishInfo" />
                    </div>
                </div>
            }

            @if (DocumentInfo != null)
            {
                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#documentInfoCollapse"
                                aria-expanded="false"
                                aria-controls="documentInfoCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>Document Info</span>
                        </button>
                    </div>

                    <div class="card-body collapse" id="documentInfoCollapse">
                        <DocumentInfoRenderer DocumentInfo="DocumentInfo" />
                    </div>
                </div>
            }

            @if (CustomInfo != null)
            {
                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#customInfoCollapse"
                                aria-expanded="false"
                                aria-controls="customInfoCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>Custom Info</span>
                        </button>
                    </div>

                    <div class="card-body collapse" id="customInfoCollapse">
                        <CustomInfoRenderer CustomInfo="CustomInfo" />
                    </div>
                </div>
            }

            @if (FileInfo != null)
            {
                <div class="card my-2">
                    <div class="card-header shadow-none" style="padding-left: 0 !important; outline: none !important;">
                        <button class="btn float-start"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#fileInfoCollapse"
                                aria-expanded="false"
                                aria-controls="fileInfoCollapse">

                            <span class="infoExpanded">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>
                            <span class="infoCollapsed">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </span>

                            <span>File Info</span>
                        </button>
                    </div>

                    <div class="card-body collapse" id="fileInfoCollapse">
                        <FileInfoRenderer FileInfo="FileInfo" />
                    </div>
                </div>
            }

            <button class="readBookBtn btn btn-primary p-3" @onclick="ReadBook">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-book" viewBox="0 0 16 16">
                    <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z" />
                </svg>
            </button>

        </div>
    </div>
}

@code {
    public class FileInfoViewModel
    {
        public string FilePath { get; set; } = string.Empty;
        public string FileName { get; set; } = string.Empty;
        public long FileSizeInBytes { get; set; } = 0;

        public override bool Equals(object? obj)
        {
            return obj is FileInfoViewModel model &&
                   FilePath == model.FilePath &&
                   FileName == model.FileName &&
                   FileSizeInBytes == model.FileSizeInBytes;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(FilePath, FileName, FileSizeInBytes);
        }
    }

    public class BookImageViewModel
    {
        public string ImageSource { get; set; } = string.Empty;
        public string OriginalSource { get; set; } = string.Empty;
        public string ContentType { get; set; } = string.Empty;
        public string ImageId { get; set; } = string.Empty;

        public override bool Equals(object? obj)
        {
            return obj is BookImageViewModel model &&
                   ImageSource == model.ImageSource &&
                   OriginalSource == model.OriginalSource &&
                   ImageId == model.ImageId &&
                   ContentType == model.ContentType;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(ImageSource, ContentType, ImageId);
        }
    }

    private ModalWindow modalRef = new();

    private BookModel? SelectedBook = null;

    private TitleInfoBase? TitleInfo = null;
    private TitleInfoBase? SrcTitleInfo = null;
    private List<BookImageViewModel>? BookImages = null;
    private PublishInfo? PublishInfo = null;
    private DocumentInfo? DocumentInfo = null;
    private CustomInfo? CustomInfo = null;
    private FileInfoViewModel? FileInfo = null;

    private BookImageViewModel? SelectedBookImage = null;

    private Dictionary<string, string> imageSignatures = new()
        {
            ["R0lGODdh"] = "image/gif",
            ["R0lGODlh"] = "image/gif",
            ["iVBORw0KGgo"] = "image/png",
            ["/9j/"] = "image/jpeg",
            ["SUkqAA"] = "image/tiff",
            ["TU0AKg"] = "image/tiff",
            ["Qk0"] = "image/bmp"
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SelectedBook = AppStateService.CurrentBookModel;

        if (SelectedBook == null)
            return;

        var doc = SelectedBook.Fb2Document;

        TitleInfo = doc.Title;
        SrcTitleInfo = doc.SourceTitle;
        BookImages = doc.BinaryImages.Select(bi =>
        {
            var contentType = bi.TryGetAttribute(AttributeNames.ContentType, out var contentTypeAttr) ?
                            contentTypeAttr!.Value : string.Empty;

            var bookImageSource = $"data:{contentType};base64,{bi.Content}";
            var bookImageId = bi.TryGetAttribute(AttributeNames.Id, out var idAttr) ?
                            idAttr!.Value : string.Empty;
            return new BookImageViewModel
                {
                    ImageId = bookImageId,
                    ContentType = contentType,
                    ImageSource = bookImageSource,
                    OriginalSource = bi.Content
                };
        })?.ToList();
        PublishInfo = doc.PublishInfo;
        DocumentInfo = doc.DocumentInfo;
        CustomInfo = doc.CustomInfo;
        FileInfo = new FileInfoViewModel
            {
                FileName = SelectedBook.FileName,
                FilePath = SelectedBook.FilePath,
                FileSizeInBytes = SelectedBook.FileSizeInBytes
            };
    }

    public void OnImageClick(BookImageViewModel selectedImage)
    {
        this.SelectedBookImage = selectedImage;
        modalRef.Open();
    }

    public void OnModalPreviewImageClick(BookImageViewModel selectedImage)
    {
        this.SelectedBookImage = selectedImage;
    }

    public void CloseImageModal()
    {
        modalRef.Close();
    }

    public void ReadBook()
    {
        NavManager.NavigateTo("/readBook", false, false);
    }

    public async void DownloadImage()
    {
        var bookImage = this.SelectedBookImage;
        if (bookImage == null)
            return;

        var contentType = string.IsNullOrEmpty(bookImage.ContentType) ?
            TryGetContentTypeFromBase64Content(bookImage.OriginalSource) :
            bookImage.ContentType;

        var fileExtension = contentType.Split('/').Last();
        var normalizedFileExtension = $".{fileExtension}";

        var suggestedFileName = bookImage.ImageId.EndsWith(normalizedFileExtension) ?
            bookImage.ImageId :
            $"{bookImage.ImageId}{normalizedFileExtension}";

        using var stream = new MemoryStream(Convert.FromBase64String(bookImage.OriginalSource));
        CancellationTokenSource source = new CancellationTokenSource();
        CancellationToken token = source.Token;

        var safeFileResult = await FileSaver.Default.SaveAsync(suggestedFileName, stream, token);

        //if (safeFileResult.IsSuccessful)
        //{
        //    await Toast.Make($"The file was saved successfully to location: {safeFileResult.FilePath}").Show(token);
        //}
        //else
        //{
        //    await Toast.Make($"The file was not saved successfully with error: {safeFileResult.Exception.Message}").Show(token);
        //}

        if (!safeFileResult.IsSuccessful)
            await Toast.Make($"The file was not saved successfully with error: {safeFileResult.Exception.Message}").Show(token);
    }

    private string TryGetContentTypeFromBase64Content(string base64Content)
    {
        var mime = imageSignatures.FirstOrDefault(k => base64Content.StartsWith(k.Key)).Value;
        if (string.IsNullOrEmpty(mime))
            mime = "application/octet-stream";

        return mime;
    }
}
